services:
#  nginx:
#    image: nginx:latest
#    ports:
#      - "80:80"
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  auth_service:
    build:
      context: .
      dockerfile: auth_service/Dockerfile
    ports:
      - 8080:8080
    depends_on:
      postgres_users:
        condition: service_healthy
      redis_refresh:
        condition: service_healthy
      redis_verify:
        condition: service_healthy
    environment:
      - JWT_SECRET_KEY
      - REDIS_REFRESH_PASSWORD
      - REDIS_VERIFY_PASSWORD
      - SMTP_HOST
      - SMTP_PORT
      - SMTP_PASSWORD
      - FROM_EMAIL
    volumes:
      - ./auth_service/cmd/log:/auth_service/cmd/log
  postgres_users:
    image: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: usersdb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d usersdb"]
      interval: 10s
      timeout: 5s
      retries: 5
  migrate_users:
    image: gomicro/goose
    command: goose -dir /app/migrations postgres "postgresql://admin:admin@postgres_users:5432/usersdb?sslmode=disable" up
    volumes:
      - ./auth_service/internal/database/migrations:/app/migrations
    depends_on:
      postgres_users:
        condition: service_healthy
  redis_refresh:
    image: redis:latest
    ports:
      - 6379:6379
    environment:
      - REDIS_REFRESH_PASSWORD
    command: ["redis-server", "--requirepass", "${REDIS_REFRESH_PASSWORD}"]
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "127.0.0.1", "-a", "${REDIS_REFRESH_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 5
  redis_verify:
    image: redis:latest
    ports:
      - 6380:6379
    environment:
      - REDIS_VERIFY_PASSWORD
    command: [ "redis-server", "--requirepass", "${REDIS_VERIFY_PASSWORD}" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "127.0.0.1", "-a", "${REDIS_VERIFY_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 5

  auth_tests:
    build:
      context: .
      dockerfile: tests/auth/Dockerfile
    depends_on:
      auth_service:
        condition: service_started

